// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: dialout.proto

package proto

import (
	context "context"
	gnmi "github.com/openconfig/gnmi/proto/gnmi"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GNMIDialoutClient is the client API for GNMIDialout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GNMIDialoutClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (GNMIDialout_PublishClient, error)
}

type gNMIDialoutClient struct {
	cc grpc.ClientConnInterface
}

func NewGNMIDialoutClient(cc grpc.ClientConnInterface) GNMIDialoutClient {
	return &gNMIDialoutClient{cc}
}

func (c *gNMIDialoutClient) Publish(ctx context.Context, opts ...grpc.CallOption) (GNMIDialout_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &GNMIDialout_ServiceDesc.Streams[0], "/gnmi_dialout.gNMIDialout/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &gNMIDialoutPublishClient{stream}
	return x, nil
}

type GNMIDialout_PublishClient interface {
	Send(*gnmi.SubscribeResponse) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type gNMIDialoutPublishClient struct {
	grpc.ClientStream
}

func (x *gNMIDialoutPublishClient) Send(m *gnmi.SubscribeResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gNMIDialoutPublishClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GNMIDialoutServer is the server API for GNMIDialout service.
// All implementations must embed UnimplementedGNMIDialoutServer
// for forward compatibility
type GNMIDialoutServer interface {
	Publish(GNMIDialout_PublishServer) error
	mustEmbedUnimplementedGNMIDialoutServer()
}

// UnimplementedGNMIDialoutServer must be embedded to have forward compatible implementations.
type UnimplementedGNMIDialoutServer struct {
}

func (UnimplementedGNMIDialoutServer) Publish(GNMIDialout_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedGNMIDialoutServer) mustEmbedUnimplementedGNMIDialoutServer() {}

// UnsafeGNMIDialoutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GNMIDialoutServer will
// result in compilation errors.
type UnsafeGNMIDialoutServer interface {
	mustEmbedUnimplementedGNMIDialoutServer()
}

func RegisterGNMIDialoutServer(s grpc.ServiceRegistrar, srv GNMIDialoutServer) {
	s.RegisterService(&GNMIDialout_ServiceDesc, srv)
}

func _GNMIDialout_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GNMIDialoutServer).Publish(&gNMIDialoutPublishServer{stream})
}

type GNMIDialout_PublishServer interface {
	Send(*PublishResponse) error
	Recv() (*gnmi.SubscribeResponse, error)
	grpc.ServerStream
}

type gNMIDialoutPublishServer struct {
	grpc.ServerStream
}

func (x *gNMIDialoutPublishServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gNMIDialoutPublishServer) Recv() (*gnmi.SubscribeResponse, error) {
	m := new(gnmi.SubscribeResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GNMIDialout_ServiceDesc is the grpc.ServiceDesc for GNMIDialout service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GNMIDialout_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnmi_dialout.gNMIDialout",
	HandlerType: (*GNMIDialoutServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _GNMIDialout_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dialout.proto",
}
